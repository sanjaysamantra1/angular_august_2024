How Javascript Works
====================
-When a javascript code is executed, N # of execution contexts are created.
-1 Global Execution context(anonymous) is created for every javascript program.
-For Each Function call 1 execution context is created.
-Execution context is the environment within which the current code is being executed.
-Each execution context has two phases: 
	1. creation phase. (Allocates memory - variables & functions and assign 'undefined' to variables)
	2. execution phase. (Code gets Executed - assign values to variables & method invocation)


https://www.youtube.com/watch?v=iLWTnMzWtj4&t=1044s
https://www.jsv9000.app/


Event Loop
==========
1. Heap - variables are stored physically
2. Stack - Global Code + all the regular functions are directly placed in callstack for execution
 CallBack Functions cannot be placed in callstack directly,they have to come to callstack via callback queue
3. CallBack Queue - where all the callback functions will wait
   a. task queue -  settimeout callback , setinterval callback
   b. microtask queue - promise() , mutationobserver()
4. Event Loop - Keeps checking call stack, and when event loop finds that call stack is free,
   event loop brings callbacks from callback queue and assigns that to callstack